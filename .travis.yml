os: linux
language: cpp

# We want to run the `*_severe` debug and test targets; thus, we need
# to enable ptrace capability for (L/A)SAN which is currently not possible
# with container-based builds on travis-ci
# TODO: revert to `sudo: false` once the following are fixed/made possible
# - https://github.com/google/sanitizers/issues/764
# - https://github.com/travis-ci/travis-ci/issues/9033
sudo: required


# List required addons:

# - Test with clang and gcc compilers with minimum and default versions:
#   Our `*_severe` debug and test targets require g++ >= 4.9 and clang++ >= 3.5

# - creating doxygen documentations requires the packages: doxygen ... graphviz


jobs:
  fast_finish: true

  include:
    - compiler: gcc
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['g++-4.9', 'doxygen', 'doxygen-latex', 'doxygen-doc', 'doxygen-gui', 'graphviz']
      env: MATRIX_EVAL="CC=gcc-4.9 && CXX=g++-4.9" UPDATE_BINUTILS="false"

    - compiler: gcc
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['doxygen', 'doxygen-latex', 'doxygen-doc', 'doxygen-gui', 'graphviz']
      env: MATRIX_EVAL="echo Default gcc version" UPDATE_BINUTILS="true"

    - compiler: clang
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['clang-3.5', 'doxygen-latex', 'doxygen-doc', 'doxygen-gui', 'graphviz']
      env: MATRIX_EVAL="CC=clang-3.5 && CXX=clang++-3.5" UPDATE_BINUTILS="false"

    - compiler: clang
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['doxygen', 'doxygen-latex', 'doxygen-doc', 'doxygen-gui', 'graphviz']
      env: MATRIX_EVAL="echo Default clang version" UPDATE_BINUTILS="false"



before_install:
  - if [ "$UPDATE_BINUTILS" -eq "true" ] ; then source ./tools/travis_update_binutils.sh ; fi
  - eval "${MATRIX_EVAL}"


script:
  # compile and run optimized binary
  - make clean bin bint_run
  # compile and run debug binary
  - make clean bin_debug_severe bint_run
  # compile and run (severe) unit tests
  - ASAN_OPTIONS=detect_leaks=1 LSAN_OPTIONS=suppressions=.LSAN_suppr.txt make clean test_severe test_run
  # determine code coverage of unit tests
  - make clean cov test_run
  # check that doxygen generates documentation without warnings
  - make doc

before_cache:
  # don't cache generated documentation files
  - rm -rf doc/html

after_success:
  # have `codecov` collect code coverage results
  - bash <(curl -s https://codecov.io/bash) || echo "Codecov did not collect coverage reports"
  # clean up
  - make clean
